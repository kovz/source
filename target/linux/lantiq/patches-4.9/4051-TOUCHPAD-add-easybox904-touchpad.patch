--- a/drivers/input/keyboard/Kconfig
+++ b/drivers/input/keyboard/Kconfig
@@ -734,4 +734,20 @@ config KEYBOARD_BCM
 	  To compile this driver as a module, choose M here: the
 	  module will be called bcm-keypad.
 
+config KEYBOARD_EB904
+	tristate "EB904 Keypad Support"
+	depends on I2C
+	select INPUT_MATRIXKMAP
+	help
+	  This driver implements basic keypad functionality
+	  for keys connected through MA86P03 keypad decoder.
+
+	  If enabled the complete MA86P03 device will be managed through
+	  this driver.
+
+	  To compile this driver as a module, choose M here: the
+	  module will be called eb904_keypad.
+
+	  This driver is used by the easybox 904 xdsl device.
+
 endif
--- a/drivers/input/keyboard/Makefile
+++ b/drivers/input/keyboard/Makefile
@@ -64,3 +64,4 @@ obj-$(CONFIG_KEYBOARD_TEGRA)		+= tegra-k
 obj-$(CONFIG_KEYBOARD_TWL4030)		+= twl4030_keypad.o
 obj-$(CONFIG_KEYBOARD_XTKBD)		+= xtkbd.o
 obj-$(CONFIG_KEYBOARD_W90P910)		+= w90p910_keypad.o
+obj-$(CONFIG_KEYBOARD_EB904)		+= eb904_keypad.o
--- /dev/null
+++ b/drivers/input/keyboard/eb904_keypad.c
@@ -0,0 +1,760 @@
+/*
+ * Driver for eb904 I2C keyboard.
+ * Supports the MA86P03 touchpad controller of Easybox 904 XDSL.
+ *
+ * Author: Quallenauge <Hamsi2k@freenet.de>
+ *
+ * This program is free software; you can redistribute it and/or
+ * modify it under the terms of the GNU General Public
+ * License v2 as published by the Free Software Foundation.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+ * General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public
+ * License along with this program; if not, write to the
+ * Free Software Foundation, Inc., 59 Temple Place - Suite 330,
+ * Boston, MA 021110-1307, USA.
+ *
+ */
+#include <linux/device.h>
+#include <linux/types.h>
+#include <linux/module.h>
+#include <linux/init.h>
+#include <linux/delay.h>
+#include <linux/slab.h>
+#include <linux/interrupt.h>
+#include <linux/workqueue.h>
+#include <linux/gpio.h>
+#include <linux/i2c.h>
+#include <linux/input.h>
+#include <linux/of.h>
+#include <linux/of_gpio.h>
+#include <linux/kthread.h>
+#include <linux/random.h>
+#include <linux/input/matrix_keypad.h>
+
+#undef DEBUG_VERBOSE
+
+/* EB904 Base definition */
+#define EB904_I2C_ADDR	0x14
+#define	EB904_NAME		"eb904_keypad"
+
+/* Timer configuration */
+#define EB904_LED_INACTIVITY_DELAY_MS (30*1000)
+
+/* EB904 register offsets */
+#define REG_INIT		0x00
+#define REG_VALUE		0x01
+#define REG_LED_CONFIG	0x02
+#define REG_MULTITOUCH	0x03
+#define REG_LEFT_CFG	0x10
+#define REG_DOWN_CFG	0x11
+#define REG_RIGHT_CFG	0x12
+#define REG_OK_CFG		0x13
+#define REG_UP_CFG		0x14
+
+#define KEY_SENSORS_COUNT 5
+
+/* EB904 key definitions */
+#define KEY_EVENT_CODE		0x7f
+#define KEY_EVENT_VALUE		0x80
+
+#define CODE_KEY_LEFT        0x1
+#define CODE_KEY_DOWN        0x2
+#define CODE_KEY_RIGHT       0x3
+#define CODE_KEY_OK          0x4
+#define CODE_KEY_UP          0x5
+
+/* EB904 bit definitions */
+#define CFG_LED_STATUS		BIT(7)
+#define CFG_LED_OK			BIT(5)
+#define CFG_LED_LEFT	    BIT(4)
+#define CFG_LED_OK2			BIT(3)
+#define CFG_LED_UP			BIT(2)
+#define CFG_LED_RIGHT	    BIT(1)
+#define CFG_LED_DOWN	    BIT(0)
+#define CFG_LED_ALL         (CFG_LED_STATUS | CFG_LED_OK | CFG_LED_LEFT  | CFG_LED_OK2 | \
+	                        CFG_LED_UP | CFG_LED_RIGHT | CFG_LED_DOWN)
+
+#define CFG_MULTITOUCH_OFF  0x40
+#define CFG_MULTITOUCH_ON   0x00
+
+#define INT_STAT_CAD_INT	BIT(4)
+#define INT_STAT_OVR_FLOW_INT	BIT(3)
+#define INT_STAT_K_LCK_INT	BIT(2)
+#define INT_STAT_GPI_INT	BIT(1)
+#define INT_STAT_K_INT		BIT(0)
+
+#define INITIALIZATION_RETRIES  20
+#define INITIALIZATION_DELAY_MS 1000
+
+static struct workqueue_struct *eb904_wq;
+
+struct eb904_keypad {
+	struct i2c_client *client;
+	struct input_dev *input;
+	struct work_struct work;
+	struct hrtimer htimer;
+	struct delayed_work led_work;
+	bool polling_mode;
+	int sipoClK;
+	int sipoDAT;
+	int sipoOUT;
+	unsigned int row_shift;
+};
+
+struct eb904_initval {
+	int reg;
+	u8 val;
+};
+
+static struct eb904_keypad *eb904_keypad_reference;
+
+static int eb904_read_byte(struct eb904_keypad *keypad_data, int reg, u8 *val);
+static int eb904_write_byte(struct eb904_keypad *keypad_data, int reg, u8 val);
+
+static ktime_t kt_periode;
+
+static void handleEvent(struct eb904_keypad *keypad_data) {
+	int error, col, row = 0;
+	u8 reg, state, code, light_flags;
+	struct input_dev *input = keypad_data->input;
+	unsigned short *keymap = input->keycode;
+
+	/*
+	 int i,j;
+	 u8 testKeys[] = { 0x00, 0x01, 0x02, 0x03, 0x04, 0x05};
+
+	 get_random_bytes(&i, sizeof(int));
+	 i = abs(i) % 5;
+	 get_random_bytes(&j, sizeof(int));
+	 j = abs(j) % 2;
+
+	 reg=testKeys[i];
+	 printk("i=%d\n", i);
+	 printk("Provide dummy key touch code=0x%02x\n", reg);
+
+	 if (j==0){
+	 reg |= KEY_EVENT_VALUE;
+	 }
+
+	 printk("Provide final dummy key touch code=0x%02x\n", reg);
+	 */
+
+	error = eb904_read_byte(keypad_data, 0x01, &reg);
+	dev_dbg(&keypad_data->client->dev, "Read byte 0x%02x\n", reg);
+
+	/* Assume that key code 0 signifies empty FIFO */
+	if (error >= 0 && reg > 0) {
+		state = reg & KEY_EVENT_VALUE;
+		code = reg & KEY_EVENT_CODE;
+
+		/*
+		 * Cancel scheduled polling for release if we have new value
+		 * available. Wait if the polling is already running.
+		 */
+		cancel_delayed_work_sync(&keypad_data->led_work);
+
+		switch (code) {
+		case CODE_KEY_UP:
+			row = 0;
+			col = 1;
+			light_flags = (CFG_LED_ALL ^ CFG_LED_UP);
+			break;
+		case CODE_KEY_LEFT:
+			row = 1;
+			col = 0;
+			light_flags = (CFG_LED_ALL ^ CFG_LED_LEFT);
+			break;
+		case CODE_KEY_OK:
+			row = 1;
+			col = 1;
+			light_flags = (CFG_LED_ALL ^ (CFG_LED_OK | CFG_LED_OK2));
+			break;
+		case CODE_KEY_RIGHT:
+			row = 1;
+			col = 2;
+			light_flags = (CFG_LED_ALL ^ CFG_LED_RIGHT);
+			break;
+		case CODE_KEY_DOWN:
+			row = 2;
+			col = 1;
+			light_flags = (CFG_LED_ALL ^ CFG_LED_DOWN);
+			break;
+
+		default: {
+			dev_err(&keypad_data->client->dev, "Unknown code 0x%02x\n", code);
+			return;
+		}
+		}
+
+		if (!state) {
+			// turn on all lights in case no buttons are touched
+			light_flags = CFG_LED_ALL;
+		}
+
+		error = eb904_write_byte(keypad_data, REG_LED_CONFIG, light_flags);
+		if (error < 0) {
+			dev_err(&keypad_data->client->dev,
+					"Error while writing led status 0x%02x\n", code);
+		}
+
+		code = MATRIX_SCAN_CODE(row, col, keypad_data->row_shift);
+		input_event(input, EV_MSC, MSC_SCAN, code);
+		input_report_key(input, keymap[code], state);
+
+		dev_dbg(&keypad_data->client->dev,
+				"Reported code=0x%04x state=0x%02x\n", code, state);
+
+		/* start LED switch off timer */
+		schedule_delayed_work(&keypad_data->led_work,
+				msecs_to_jiffies( EB904_LED_INACTIVITY_DELAY_MS));
+	}
+	input_sync(input);
+}
+
+static void eb904_tp_work_func(struct work_struct *work) {
+	struct eb904_keypad
+	*keypad_data = container_of(work, struct eb904_keypad, work);
+	handleEvent(keypad_data);
+}
+static void eb904_tp_led_work_func(struct work_struct *work) {
+	int error;
+	struct eb904_keypad
+	*keypad_data = container_of(work, struct eb904_keypad, led_work.work);
+	error = eb904_write_byte(keypad_data, REG_LED_CONFIG, 0x40); // switch off lights
+	if (error < 0) {
+		dev_err(&keypad_data->client->dev,
+				"Error while writing switch-off led status.\n");
+		return;
+	}
+	dev_dbg(&keypad_data->client->dev, "Switched off touchpanel led.\n");
+}
+
+static enum hrtimer_restart timer_function(struct hrtimer * hrtimer) {
+	struct eb904_keypad
+	*keypad_data = container_of(hrtimer, struct eb904_keypad, htimer);
+
+	queue_work(eb904_wq, &keypad_data->work);
+
+	hrtimer_forward_now(hrtimer, kt_periode);
+
+	return HRTIMER_RESTART;
+}
+
+static void timer_init(struct eb904_keypad *keypad_data) {
+	if (keypad_data->polling_mode) {
+		kt_periode = ktime_set(0, 500 * 1000000); //seconds,nanoseconds (500ms)
+		hrtimer_init(&keypad_data->htimer, CLOCK_MONOTONIC, HRTIMER_MODE_REL);
+		keypad_data->htimer.function = timer_function;
+		hrtimer_start(&keypad_data->htimer, kt_periode, HRTIMER_MODE_REL);
+	}
+
+	/* start LED switch off timer */
+	schedule_delayed_work(&keypad_data->led_work,
+			msecs_to_jiffies( EB904_LED_INACTIVITY_DELAY_MS));
+}
+
+static void timer_cleanup(struct eb904_keypad *keypad_data) {
+	if (keypad_data->polling_mode && &keypad_data->htimer) {
+		hrtimer_cancel(&keypad_data->htimer);
+	}
+
+	cancel_delayed_work_sync(&keypad_data->led_work);
+}
+
+/*
+ * Write a byte to the EB904
+ */
+static int eb904_write_byte(struct eb904_keypad *keypad_data, int reg, u8 val) {
+	int error;
+
+	error = i2c_smbus_write_byte_data(keypad_data->client, reg, val);
+	if (error < 0) {
+		dev_err(&keypad_data->client->dev,
+				"%s failed, reg: %d, val: %d, error: %d\n", __func__, reg, val,
+				error);
+		return error;
+	}
+#ifdef DEBUG_VERBOSE
+	printk("Wrote content to reg: 0x%02x val: 0x%02x\n",reg, *val);
+#endif
+
+	return 0;
+}
+
+/*
+ * Read a byte from the EB904
+ */
+static int eb904_read_byte(struct eb904_keypad *keypad_data, int reg, u8 *val) {
+	int error;
+
+	error = i2c_smbus_read_byte_data(keypad_data->client, reg);
+	if (error < 0) {
+		dev_err(&keypad_data->client->dev, "%s failed, reg: %d, error: %d\n",
+				__func__, reg, error);
+		return error;
+	}
+
+	*val = (u8) error;
+
+#ifdef DEBUG_VERBOSE
+	printk("Read content of reg: 0x%02x val: 0x%02x\n",reg, *val);
+#endif
+	return 0;
+}
+
+#if 0
+static const struct eb904_initval eb904_initvals[] = {
+	{	0x00,0x05}, /* static */
+	{	0x01,0x00}, /* sensor */
+	{	0x02,0x7f}, /* LED Control! */
+	{	0x03,0xff}, /* ? */
+	//{0x0c,0x80}, /* read-only */
+	//{0x0d,0x93}, /* read-only */
+	//{0x0e,0x00}, /* read-only */
+	//{0x0f,0x50}, /* read-only */
+	{	0x10,0x07}, /* left */
+	{	0x11,0x0a}, /* down */
+	{	0x12,0x0a}, /* right */
+	{	0x13,0x0a}, /* ok */
+	{	0x14,0x07}, /* up */
+	{	0xfe,0x00},
+};
+
+static int eb904_write_initvals(struct eb904_keypad *keypad_data, const struct eb904_initval *initvals, int count)
+{
+	int err;
+	int i;
+
+	for (i = 0; i < count; i++) {
+		err = eb904_write_byte(keypad_data, initvals[i].reg, initvals[i].val);
+		if (err<0) {
+			return err;
+		}
+	}
+
+	return 0;
+}
+#endif
+
+/*
+ * Threaded IRQ handler and this can (and will) sleep.
+ */
+static irqreturn_t eb904_irq_handler(int irq, void *dev_id) {
+	struct eb904_keypad *keypad_data = dev_id;
+
+	dev_dbg(&keypad_data->client->dev, "TP-IRQ triggered.\n");
+
+	handleEvent(keypad_data);
+
+	return IRQ_HANDLED;
+}
+
+/*
+ * Helper function for setting a GPIO value
+ * used by the initialization sequence.
+ */
+static void gpio_set_value_and_wait(unsigned int gpio, int value) {
+	gpio_set_value(gpio, value);
+	mdelay(10);
+}
+
+/*
+ * Configure the EB904 for keypad operation
+ */
+static int eb904_configure(struct device *dev, struct eb904_keypad *keypad_data,
+		u8 key_sensor_alphas[]) {
+	int i, error = 0;
+	u8 reg = 0;
+	/**
+	 * Start performing a magic sequence,
+	 * which turns on the touchpad device.
+	 */
+	dev_dbg(dev, "Starting initialization sequence.\n");
+	gpio_set_value_and_wait(keypad_data->sipoOUT, 0);
+	gpio_set_value_and_wait(keypad_data->sipoClK, 0);
+	gpio_set_value_and_wait(keypad_data->sipoDAT, 1);
+	gpio_set_value_and_wait(keypad_data->sipoClK, 1);
+	gpio_set_value_and_wait(keypad_data->sipoClK, 0);
+	gpio_set_value_and_wait(keypad_data->sipoDAT, 0);
+	gpio_set_value_and_wait(keypad_data->sipoClK, 1);
+	gpio_set_value_and_wait(keypad_data->sipoClK, 0);
+	gpio_set_value_and_wait(keypad_data->sipoDAT, 0);
+	gpio_set_value_and_wait(keypad_data->sipoClK, 1);
+	gpio_set_value_and_wait(keypad_data->sipoClK, 0);
+	gpio_set_value_and_wait(keypad_data->sipoDAT, 0);
+	gpio_set_value_and_wait(keypad_data->sipoClK, 1);
+	gpio_set_value_and_wait(keypad_data->sipoClK, 0);
+	gpio_set_value_and_wait(keypad_data->sipoDAT, 1);
+	gpio_set_value_and_wait(keypad_data->sipoClK, 1);
+	gpio_set_value_and_wait(keypad_data->sipoClK, 0);
+	gpio_set_value_and_wait(keypad_data->sipoDAT, 0);
+	gpio_set_value_and_wait(keypad_data->sipoClK, 1);
+	gpio_set_value_and_wait(keypad_data->sipoClK, 0);
+	gpio_set_value_and_wait(keypad_data->sipoDAT, 1);
+	gpio_set_value_and_wait(keypad_data->sipoClK, 1);
+	gpio_set_value_and_wait(keypad_data->sipoClK, 0);
+	gpio_set_value_and_wait(keypad_data->sipoDAT, 1);
+	gpio_set_value_and_wait(keypad_data->sipoClK, 1);
+	gpio_set_value_and_wait(keypad_data->sipoClK, 0);
+	gpio_set_value_and_wait(keypad_data->sipoOUT, 1);
+	gpio_set_value_and_wait(keypad_data->sipoOUT, 0);
+	gpio_set_value_and_wait(keypad_data->sipoOUT, 0);
+	gpio_set_value_and_wait(keypad_data->sipoClK, 0);
+	gpio_set_value_and_wait(keypad_data->sipoDAT, 1);
+	gpio_set_value_and_wait(keypad_data->sipoClK, 1);
+	gpio_set_value_and_wait(keypad_data->sipoClK, 0);
+	gpio_set_value_and_wait(keypad_data->sipoDAT, 0);
+	gpio_set_value_and_wait(keypad_data->sipoClK, 1);
+	gpio_set_value_and_wait(keypad_data->sipoClK, 0);
+	gpio_set_value_and_wait(keypad_data->sipoDAT, 0);
+	gpio_set_value_and_wait(keypad_data->sipoClK, 1);
+	gpio_set_value_and_wait(keypad_data->sipoClK, 0);
+	gpio_set_value_and_wait(keypad_data->sipoDAT, 0);
+	gpio_set_value_and_wait(keypad_data->sipoClK, 1);
+	gpio_set_value_and_wait(keypad_data->sipoClK, 0);
+	gpio_set_value_and_wait(keypad_data->sipoDAT, 1);
+	gpio_set_value_and_wait(keypad_data->sipoClK, 1);
+	gpio_set_value_and_wait(keypad_data->sipoClK, 0);
+	gpio_set_value_and_wait(keypad_data->sipoDAT, 1);
+	gpio_set_value_and_wait(keypad_data->sipoClK, 1);
+	gpio_set_value_and_wait(keypad_data->sipoClK, 0);
+	gpio_set_value_and_wait(keypad_data->sipoDAT, 1);
+	gpio_set_value_and_wait(keypad_data->sipoClK, 1);
+	gpio_set_value_and_wait(keypad_data->sipoClK, 0);
+	gpio_set_value_and_wait(keypad_data->sipoDAT, 1);
+	gpio_set_value_and_wait(keypad_data->sipoClK, 1);
+	gpio_set_value_and_wait(keypad_data->sipoClK, 0);
+	gpio_set_value_and_wait(keypad_data->sipoOUT, 1);
+	gpio_set_value_and_wait(keypad_data->sipoOUT, 0);
+
+	dev_dbg(dev, "%s: Wait a moment to let the device initializing.\n",
+			__func__);
+	for (i = 0; i < INITIALIZATION_RETRIES; ++i) {
+		mdelay(INITIALIZATION_DELAY_MS);
+		error = eb904_read_byte(keypad_data, 0x00, &reg);
+		if (error >= 0) {
+			// device is up and running, wait again and then exit
+			mdelay(INITIALIZATION_DELAY_MS);
+			break;
+		}
+	}
+	devm_gpio_free(dev, keypad_data->sipoClK);
+	devm_gpio_free(dev, keypad_data->sipoDAT);
+	devm_gpio_free(dev, keypad_data->sipoOUT);
+
+	//eb904_write_initvals(keypad_data, eb904_initvals, ARRAY_SIZE(eb904_initvals));
+
+	/*
+	 * Set up alpha values for the touch density.
+	 */
+	dev_dbg(dev, "Alpha (left):  0x%02x\n", key_sensor_alphas[0]);
+	dev_dbg(dev, "Alpha (down):  0x%02x\n", key_sensor_alphas[1]);
+	dev_dbg(dev, "Alpha (right): 0x%02x\n", key_sensor_alphas[2]);
+	dev_dbg(dev, "Alpha (ok):    0x%02x\n", key_sensor_alphas[3]);
+	dev_dbg(dev, "Alpha (up):    0x%02x\n", key_sensor_alphas[4]);
+	error = eb904_write_byte(keypad_data, REG_LEFT_CFG, key_sensor_alphas[0]);
+	if (error < 0) {
+		return error;
+	}
+	error = eb904_write_byte(keypad_data, REG_DOWN_CFG, key_sensor_alphas[1]);
+	if (error < 0) {
+		return error;
+	}
+	error = eb904_write_byte(keypad_data, REG_RIGHT_CFG, key_sensor_alphas[2]);
+	if (error < 0) {
+		return error;
+	}
+	error = eb904_write_byte(keypad_data, REG_OK_CFG, key_sensor_alphas[3]);
+	if (error < 0) {
+		return error;
+	}
+	error = eb904_write_byte(keypad_data, REG_UP_CFG, key_sensor_alphas[4]);
+	if (error < 0) {
+		return error;
+	}
+
+	/*
+	 * Turn on the lights at start.
+	 */
+	error = eb904_write_byte(keypad_data, REG_LED_CONFIG, CFG_LED_ALL);
+	if (error < 0) {
+		return error;
+	}
+
+	/*
+	 * Enable single touch. 0x00 seems to be used for
+	 * multi touch events (not supported by this driver).
+	 */
+	error = eb904_write_byte(keypad_data, REG_MULTITOUCH, CFG_MULTITOUCH_OFF);
+
+	return error;
+}
+
+static int _eb904_request_one_gpio(struct device *dev, const char *name,
+		int index, int *gpiop, bool input_only) {
+	struct device_node *node = dev->of_node;
+	int gpio, flags, ret = 0;
+	enum of_gpio_flags of_flags;
+
+	if (of_find_property(node, name, NULL)) {
+		gpio = of_get_named_gpio_flags(node, name, index, &of_flags);
+		if (gpio == -ENOENT)
+			return 0;
+		if (gpio == -EPROBE_DEFER)
+			return gpio;
+		if (gpio < 0) {
+			dev_err(dev, "failed to get '%s' from DT\n", name);
+			return gpio;
+		}
+
+		if (input_only) {
+			flags = GPIOF_IN;
+		} else {
+			/* active low translates to initially low */
+			flags = (of_flags & OF_GPIO_ACTIVE_LOW) ?
+					GPIOF_OUT_INIT_LOW : GPIOF_OUT_INIT_HIGH;
+		}
+		ret = devm_gpio_request_one(dev, gpio, flags, dev->driver->name);
+		if (ret) {
+			dev_err(dev, "gpio_request_one('%s'=%d) failed with %d\n", name,
+					gpio, ret);
+			return ret;
+		}
+		if (gpiop)
+			*gpiop = gpio;
+		dev_dbg(dev, "%s: '%s' = GPIO%d\n", __func__, name, gpio);
+	}
+
+	return ret;
+}
+
+static int eb904_request_one_input_gpio(struct device *dev, const char *name,
+		int index, int *gpiop) {
+	return _eb904_request_one_gpio(dev, name, index, gpiop, true);
+}
+
+static int eb904_request_one_output_gpio(struct device *dev, const char *name,
+		int index, int *gpiop) {
+	return _eb904_request_one_gpio(dev, name, index, gpiop, false);
+}
+
+static int eb904_keypad_probe(struct i2c_client *client,
+		const struct i2c_device_id *id) {
+	struct device *dev = &client->dev;
+	struct eb904_keypad *keypad_data;
+	struct input_dev *input;
+	const struct matrix_keymap_data *keymap_data = NULL;
+	u32 rows = 0, cols = 0;
+	bool rep = false;
+	bool polling_mode = false;
+	int irqGpio;
+	int ctrl_clk_gpio;
+	int ctrl_dat_gpio;
+	int ctrl_out_gpio;
+	int irq;
+	/* alpha values for LEFT, DOWN, RIGHT, OK, UP sensors */
+	u8 key_sensor_alphas[KEY_SENSORS_COUNT];
+	int error, row_shift, max_keys;
+
+	/* Platform data is not supported. Values are provided by DTS only. */
+	int err;
+	struct device_node *np = dev->of_node;
+	err = matrix_keypad_parse_of_params(dev, &rows, &cols);
+	if (err)
+		return err;
+	err = eb904_request_one_input_gpio(dev, "eb904,interrupt-gpio", 0,
+			&irqGpio);
+	if (err) {
+		dev_err(dev, "Error while parsing <eb904,interrupt-gpio> <%d>!\n", err);
+		return err;
+	}
+	err = eb904_request_one_output_gpio(dev, "eb904,ctrl-clk-gpios", 0,
+			&ctrl_clk_gpio);
+	if (err) {
+		dev_err(dev, "Error while parsing <eb904,ctrl-clk-gpios> <%d>!\n", err);
+		return err;
+	}
+	err = eb904_request_one_output_gpio(dev, "eb904,ctrl-dat-gpios", 0,
+			&ctrl_dat_gpio);
+	if (err) {
+		dev_err(dev, "Error while parsing <eb904,ctrl-dat-gpios> <%d>!\n", err);
+		return err;
+	}
+	err = eb904_request_one_output_gpio(dev, "eb904,ctrl-out-gpios", 0,
+			&ctrl_out_gpio);
+	if (err) {
+		dev_err(dev, "Error while parsing <eb904,ctrl-out-gpios> <%d>!\n", err);
+		return err;
+	}
+	err = of_property_read_u8_array(dev->of_node, "eb904,alphas",
+			key_sensor_alphas, KEY_SENSORS_COUNT);
+	if (err) {
+		dev_err(dev, "Error while parsing <eb904,alphas> <%d>!\n", err);
+		return err;
+	}
+
+	rep = of_property_read_bool(np, "keypad,autorepeat");
+	polling_mode = of_property_read_bool(np, "keypad,polling");
+
+	if (!rows || rows != 3) {
+		dev_err(dev, "invalid rows\n");
+		return -EINVAL;
+	}
+
+	if (!cols || cols != 3) {
+		dev_err(dev, "invalid columns\n");
+		return -EINVAL;
+	}
+
+	/* Check i2c driver capabilities */
+	if (!i2c_check_functionality(client->adapter, I2C_FUNC_SMBUS_BYTE)) {
+		dev_err(dev, "%s adapter not supported\n",
+				dev_driver_string(&client->adapter->dev));
+		return -ENODEV;
+	}
+
+	row_shift = get_count_order(cols);
+	max_keys = rows << row_shift;
+
+	/* Allocate memory for keypad_data and input device */
+	keypad_data = devm_kzalloc(dev, sizeof(*keypad_data), GFP_KERNEL);
+	if (!keypad_data)
+		return -ENOMEM;
+
+	keypad_data->client = client;
+	keypad_data->row_shift = row_shift;
+	keypad_data->polling_mode = polling_mode;
+	keypad_data->sipoClK = ctrl_clk_gpio;
+	keypad_data->sipoDAT = ctrl_dat_gpio;
+	keypad_data->sipoOUT = ctrl_out_gpio;
+
+	/* Initialize the chip or fail if chip isn't present */
+	error = eb904_configure(dev, keypad_data, key_sensor_alphas);
+	if (error < 0) {
+		dev_err(dev, "Error while configuring keypad!\n");
+		return error;
+	}
+
+	/* Configure input device */
+	input = devm_input_allocate_device(dev);
+	if (!input)
+		return -ENOMEM;
+
+	keypad_data->input = input;
+
+	input->name = client->name;
+	input->id.bustype = BUS_I2C;
+	input->id.vendor = 0x0001;
+	input->id.product = 0x001;
+	input->id.version = 0x0001;
+
+	error = matrix_keypad_build_keymap(keymap_data, NULL, rows, cols,
+	NULL, input);
+	if (error) {
+		dev_err(dev, "Failed to build keymap\n");
+		return error;
+	}
+
+	if (rep)
+		__set_bit(EV_REP, input->evbit);
+	input_set_capability(input, EV_MSC, MSC_SCAN);
+
+	input_set_drvdata(input, keypad_data);
+
+	if (!eb904_wq) {
+		eb904_wq = create_singlethread_workqueue("eb904_wq");
+	}
+	if (!eb904_wq)
+		return -ENOMEM;
+
+	eb904_keypad_reference = keypad_data;
+
+	//1. Init Work queue and necessary buffers
+	INIT_WORK(&keypad_data->work, eb904_tp_work_func);
+	INIT_DELAYED_WORK(&keypad_data->led_work, eb904_tp_led_work_func);
+
+	irq = client->irq;
+
+	dev_dbg(dev, "%s:%s:%d Using IRQ=%d for touchpad events.\n", __FILE__,
+			__FUNCTION__, __LINE__, irq);
+
+	if (!polling_mode) {
+		//	error = devm_gpio_request_one(dev, 462, GPIOF_IN, "TP-INT");
+		//	if (error) {
+		//		dev_err(dev, "Unable to request gpio %d as input, error: %d\n", irqGpio, error);
+		//		return error;
+		//	}
+
+		error = devm_request_threaded_irq(dev, irq, NULL, eb904_irq_handler,
+		IRQF_SHARED | IRQF_ONESHOT, client->name, keypad_data);
+
+		if (error) {
+			dev_err(dev, "Unable to claim irq %d; error %d\n", irq, error);
+			return error;
+		}
+	}
+
+	timer_init(keypad_data);
+
+	error = input_register_device(input);
+	if (error) {
+		dev_err(dev, "Unable to register input device, error: %d\n", error);
+		return error;
+	}
+
+	return 0;
+}
+
+int eb904_keypad_remove(struct i2c_client *i2c_client) {
+	if (eb904_keypad_reference) {
+		timer_cleanup(eb904_keypad_reference);
+		flush_workqueue(eb904_wq);
+	}
+	return 0;
+}
+
+static const struct i2c_device_id eb904_id[] = { { EB904_NAME, 8418, }, { } };
+MODULE_DEVICE_TABLE(i2c, eb904_id);
+
+#ifdef CONFIG_OF
+static const struct of_device_id eb904_dt_ids[] = {
+	{	.compatible = "lantiq,eb904_keypad",},
+	{}
+};
+MODULE_DEVICE_TABLE(of, eb904_dt_ids);
+
+/*
+ * The device tree based i2c loader looks for
+ * "i2c:" + second_component_of(property("compatible"))
+ * and therefore we need an alias to be found.
+ */
+MODULE_ALIAS("i2c:eb904_keypad");
+#endif
+
+static struct i2c_driver eb904_keypad_driver =
+		{ .driver = { .name = EB904_NAME, .of_match_table = of_match_ptr(
+				eb904_dt_ids), }, .probe = eb904_keypad_probe, .remove =
+				eb904_keypad_remove, .id_table = eb904_id, };
+
+static int __init eb904_keypad_init(void)
+{
+	return i2c_add_driver(&eb904_keypad_driver);
+}
+subsys_initcall(eb904_keypad_init);
+
+static void __exit eb904_keypad_exit(void)
+{
+	i2c_del_driver(&eb904_keypad_driver);
+	if (eb904_wq)
+		destroy_workqueue(eb904_wq);
+}
+module_exit(eb904_keypad_exit);
+
+MODULE_AUTHOR("Quallenauge <Hamsi2k@freenet.de>");
+MODULE_DESCRIPTION("Keypad driver for EB904 xdsl");
+MODULE_LICENSE("GPL");
